Aks <- matrix(list(), nrow = 1, ncol = n)
for(k in 1:n){
Aks[[k]] <- matrix(0, nrow = n, ncol = n)
diag(Aks[[k]])[k] <- 1
}
A1s <- svec(blk[1], Aks)[[1]]
A2s <- diag(1, nrow = n2, ncol = n2)
At1 <- cbind(A1s,A2s)
A1q <- matrix(0, nrow = n, ncol = n2 + 1)
A2q1 <- matrix(0, nrow = n2, ncol = 1)
A2q2 <- diag(1, nrow = n2, ncol = n2)
A2q <- cbind(A2q1, A2q2)
At2 <- rbind(A1q, A2q)
b <- rbind(matrix(1, n, 1),svec(blk[1], X))
sqlp(blk, list(At1,At2), C, b)
data(DoptDesign)
V = DoptDesign
n = nrow(V)
p = ncol(V)
blk = c("s" = n, "l" = p, "u" = 1)
b <- matrix(0, nrow = p, ncol = 1)
C1 <- matrix(0, nrow = n, ncol = n)
C2 <- matrix(0, nrow = p, ncol = 1)
C3 <- 1
C = list(C1,C2,C3)
A <- matrix(list(), nrow = p, ncol = 1)
for(k in 1:p){
A[[k]] <- -V[,k] %*% t(V[,k])
}
At1 <- svec(blk[1], A)
At2 <- diag(-1, nrow = p, ncol = p)
At3 <- matrix(1, nrow = 1, ncol = p)
At = list(At1,At2,At3)
control$parbarrier <- matrix(list(), nrow = 3, ncol = 1)
control$parbarrier[[1]] <- 1
control$parbarrier[[2]] <- 0
control$parbarrier[[3]] <- 0
control <- list(parbarrier = matrix(list(),3,1))
control$parbarrier[[1]] <- 1
control$parbarrier[[2]] <- 0
control$parbarrier[[3]] <- 0
sqlp(blk, At, C, b, control)
blk
library(sdpt3r)
sqlp(blk, At, C, b, control)
blk_tmp = matrix(list(),nrow=length(blk),ncol=2)
for(i in 1:length(blk)){
blk_tmp[[i,1]] = names(blk)[i]
blk_tmp[[i,2]] = blk[i]
}
blk_tmp
At
At
?doptimal
At = list(At1,At2,At3)
data(DoptDesign)
V = DoptDesign
blk
At
C
At_tmp = At
blk_tmp
C_tmp = C
b_tmp = b
b
#Define Variables
blk <- matrix(list(), 3, 2)
C <- matrix(list(), 3, 1)
At <- matrix(list(), 3, 1)
OPTIONS <- list(parbarrier = matrix(list(),3,1))
n <- nrow(V)
p <- ncol(V)
b <- matrix(0, p, 1)
blk[[1,1]] <- "s"
blk[[1,2]] <- n
Ftmp <- matrix(list(),1,p)
for(k in 1:p){
Ftmp[[1,k]] <- -V[,k] %*% t(V[,k])
}
At[1] <- svec(blk[1,,drop=FALSE],Ftmp,1)
C[[1,1]] <- Matrix(0,n,n,sparse=TRUE)
blk[[2,1]] <- "l"
blk[[2,2]] <- p
At[[2,1]] <- -diag(1,p,p)
C[[2,1]] <- matrix(0,p,1)
blk[[3,1]] <- "u"
blk[[3,2]] <- 1
At[[3,1]] <- matrix(1, 1, p)
C[[3,1]] <- 1
OPTIONS$parbarrier[[1,1]] <- 1
OPTIONS$parbarrier[[2,1]] <- 0
OPTIONS$parbarrier[[3,1]] <- 0
blk
blk_tmp
At
At[[1]]
At_tmp[[1]]
A <- matrix(list(), nrow = p, ncol = 1)
for(k in 1:p){
A[[k]] <- -V[,k] %*% t(V[,k])
}
At1 <- svec(blk[1], A)[[1]]
At2 <- diag(-1, nrow = p, ncol = p)
At3 <- matrix(1, nrow = 1, ncol = p)
At = list(At1,At2,At3)
blk = c("s" = n, "l" = p, "u" = 1)
A <- matrix(list(), nrow = p, ncol = 1)
for(k in 1:p){
A[[k]] <- -V[,k] %*% t(V[,k])
}
At1 <- svec(blk[1], A)[[1]]
At2 <- diag(-1, nrow = p, ncol = p)
At3 <- matrix(1, nrow = 1, ncol = p)
At = list(At1,At2,At3)
data(DoptDesign)
V = DoptDesign
n = nrow(V)
p = ncol(V)
blk = c("s" = n, "l" = p, "u" = 1)
C1 <- matrix(0, nrow = n, ncol = n)
C2 <- matrix(0, nrow = p, ncol = 1)
C3 <- 1
C = list(C1,C2,C3)
A <- matrix(list(), nrow = p, ncol = 1)
for(k in 1:p){
A[[k]] <- -V[,k] %*% t(V[,k])
}
At1 <- svec(blk[1], A)[[1]]
At2 <- diag(-1, nrow = p, ncol = p)
At3 <- matrix(1, nrow = 1, ncol = p)
At = list(At1,At2,At3)
control <- list(parbarrier = matrix(list(),3,1))
control$parbarrier[[1]] <- 1
control$parbarrier[[2]] <- 0
control$parbarrier[[3]] <- 0
b <- matrix(0, nrow = p, ncol = 1)
sqlp(blk, At, C, b, control)
data(DoptDesign)
out <- doptimal(DoptDesign)
out
?gpp
library(sdpt3r)
blk = c("l" = 2)
C = matrix(c(1,1),nrow=1)
A = matrix(c(1,3,4,-1), nrow=2)
At = t(A)
b = c(12,10)
out = sqlp(blk,list(At),list(C),b)
out
blk = c("q" = 2)
C = matrix(c(0.5,-1),nrow=1)
A = matrix(c(2,1,-1,1), nrow=2)
At = t(A)
b = c(5,4)
out = sqlp(blk,list(At),list(C),b)
out
blk = c("s" = 3)
C = list(matrix(c(1,2,3,2,9,0,3,0,7), nrow=3))
A1 = matrix(c(1,0,1,0,3,7,1,7,5), nrow=3)
A2 = matrix(c(0,2,8,2,6,0,8,0,4), nrow=3)
At = svec(blk,list(A1,A2))
b = c(11,9)
out = sqlp(blk,At,C,b)
out
B <- rbind(c(0, 0, 0, 1, 0, 0, 1, 1, 0, 0),
c(0, 0, 0, 1, 0, 0, 1, 0, 1, 1),
c(0, 0, 0, 0, 0, 0, 0, 1, 0, 0),
c(1, 1, 0, 0, 0, 0, 0, 1, 0, 1),
c(0, 0, 0, 0, 0, 0, 1, 1, 1, 1),
c(0, 0, 0, 0, 0, 0, 0, 0, 1, 0),
c(1, 1, 0, 0, 1, 0, 0, 1, 1, 1),
c(1, 0, 1, 1, 1, 0, 1, 0, 0, 0),
c(0, 1, 0, 0, 1, 1, 1, 0, 0, 1),
c(0, 1, 0, 1, 1, 0, 1, 0, 1, 0))
n <- max(dim(B))
blk <- c("s" = n)
A <- list()
for(k in 1:n){
A[[k]] <- Matrix(0,n,n)
A[[k]][k,k] <- 1
}
At <- svec(blk[1],A,1)
b <- matrix(1, nrow = n, ncol = 1)
sqlp(blk, At, list(C), b)
one <- matrix(1, nrow = n, ncol = 1)
C <- -(diag(c(B %*% one)) - B) / 4
sqlp(blk, At, list(C), b)
data(Hnearcorr)
X = Hnearcorr
n = max(dim(X))
n2 = n * (n + 1) / 2
blk <- c("s" = n, "q" = n2+1)
C1 <- matrix(0, nrow = n, ncol = n)
C2 <- rbind(1, matrix(0, nrow = n2, ncol = 1))
C <- list(C1,C2)
Aks <- matrix(list(), nrow = 1, ncol = n)
for(k in 1:n){
Aks[[k]] <- matrix(0, nrow = n, ncol = n)
diag(Aks[[k]])[k] <- 1
}
A1s <- svec(blk[1], Aks)[[1]]
A2s <- diag(1, nrow = n2, ncol = n2)
At1 <- cbind(A1s,A2s)
A1q <- matrix(0, nrow = n, ncol = n2 + 1)
A2q1 <- matrix(0, nrow = n2, ncol = 1)
A2q2 <- diag(1, nrow = n2, ncol = n2)
A2q <- cbind(A2q1, A2q2)
At2 <- rbind(A1q, A2q)
b <- rbind(matrix(1, n, 1),svec(blk[1], X))
sqlp(blk, list(At1,At2), C, b)
data(DoptDesign)
V = DoptDesign
n = nrow(V)
p = ncol(V)
blk = c("s" = n, "l" = p, "u" = 1)
b <- matrix(0, nrow = p, ncol = 1)
C1 <- matrix(0, nrow = n, ncol = n)
C2 <- matrix(0, nrow = p, ncol = 1)
C3 <- 1
C = list(C1,C2,C3)
A <- matrix(list(), nrow = p, ncol = 1)
for(k in 1:p){
A[[k]] <- -V[,k] %*% t(V[,k])
}
At1 <- svec(blk[1], A)[[1]]
At2 <- diag(-1, nrow = p, ncol = p)
At3 <- matrix(1, nrow = 1, ncol = p)
At = list(At1,At2,At3)
control <- list(parbarrier = matrix(list(),3,1))
control$parbarrier[[1]] <- 1
control$parbarrier[[2]] <- 0
control$parbarrier[[3]] <- 0
sqlp(blk, At, C, b, control)
library(sdpt3r)
install.packages("roxygen2")
library(sdpt3r)
?etp
data(Betp)
B = Betp
#Define Variables
n <- max(dim(B))
blk <- matrix(list(),2,2)
C <- matrix(list(),2,1)
At <- matrix(list(),2,1)
A <- matrix(list(),2,n)
blk[[1,1]] <- "s"
blk[[1,2]] <- n
blk[[2,1]] <- "l"
blk[[2,2]] <- n
b <- matrix(1,n,1)
C[[1,1]] <- B
C[[2,1]] <- matrix(0,n,1)
for(k in 1:n){
A[[1,k]] <- Matrix(0,n,n)
A[[1,k]][k,k] <- 1
A[[2,k]] <- rbind(matrix(0,k-1,1),-1,matrix(0,n-k,1))
}
At <- svec(blk,A,matrix(1,nrow(blk),1))
blk
matrix(1,nrow(blk),1)
A
At <- svec(blk,A)
M = A
isspx = matrix(1,nrow(blk),1)
if(is.vector(blk)){
blk = cbind(list(names(blk)), list(blk))
}
if(is.list(M)){
M = matrix(M,nrow=1)
}
if(is.list(M)){
if(is.null(isspx)){
isspx <- matrix(1,nrow=nrow(blk), ncol=1)
}else{
if(length(isspx) < nrow(blk)){
isspx <- matrix(1,nrow=nrow(blk), ncol=1)
}
}
x <- matrix(list(),nrow=nrow(blk), ncol=1)
for(p in 1:nrow(blk)){
n <- sum(blk[[p,2]])
m <- ncol(M)
if(blk[[p,1]] == "s"){
n2 <- sum(blk[[p,2]] * (blk[[p,2]] + 1))/2
if(isspx[p]){
x[[p,1]] <- Matrix(0,n2,m)
}else{
x[[p,1]] <- matrix(0,n2,m)
}
numblk <- length(blk[[p,2]])
if(all(blk[[p,2]] > 0)){
for(k in 1:m){
if(numblk > 1 & !is(M[[p,k]],"sparseMatrix")){
x[[p,1]][,k] <- mexsvec(blk[p,,drop=FALSE],as.matrix(M[[p,k]]),isspx[p])
}else{
x[[p,1]][,k] <- mexsvec(blk[p,,drop=FALSE],as.matrix(M[[p,k]]),isspx[p])
}
}
}
}else{
x[[p,1]] <- matrix(0,n,m)
for(k in 1:m){
x[[p,1]][,k] <- M[[p,k]]
}
}
}
}else{
if(blk[[1]] == "s"){
numblk <- length(blk[[2]])
if(numblk > 1 & !is(M, "sparseMatrix")){
x <- mexsvec(blk,as.matrix(M),1)
}else{
x <- mexsvec(blk,as.matrix(M))
}
}else{
x = M
}
}
#' Upper Triangular Vectorization
#'
#'\code{svec} takes the upper triangular matrix (including the diagonal) and vectorizes
#'it column-wise.
#'
#'@param blk 1x2 matrix detailing the type of matrix ("s", "q", "l", "u"), and the size of the matrix
#'@param M matrix which is to be vectorized
#'@param isspx if M is sparse, isspx = 1, 0 otherwise. Default is to assume M is dense.
#'
#'@return
#'\item{x}{vector of upper triangular components of x}
#'
#'@examples
#'
#'data(Hnearcorr)
#'blk <- matrix(list(),1,2)
#'blk[[1]] <- "s"
#'blk[[2]] <- nrow(Hnearcorr)
#'
#'svec(blk,Hnearcorr)
#'
#' @export
svec <- function(blk,M,isspx=NULL){
if(is.vector(blk)){
blk = cbind(list(names(blk)), list(blk))
}
if(is.list(M)){
M = matrix(M,nrow=1)
}
if(is.list(M)){
if(is.null(isspx)){
isspx <- matrix(1,nrow=nrow(blk), ncol=1)
}else{
if(length(isspx) < nrow(blk)){
isspx <- matrix(1,nrow=nrow(blk), ncol=1)
}
}
x <- matrix(list(),nrow=nrow(blk), ncol=1)
for(p in 1:nrow(blk)){
n <- sum(blk[[p,2]])
m <- ncol(M)
if(blk[[p,1]] == "s"){
n2 <- sum(blk[[p,2]] * (blk[[p,2]] + 1))/2
if(isspx[p]){
x[[p,1]] <- Matrix(0,n2,m)
}else{
x[[p,1]] <- matrix(0,n2,m)
}
numblk <- length(blk[[p,2]])
if(all(blk[[p,2]] > 0)){
for(k in 1:m){
print(p)
print(k)
if(numblk > 1 & !is(M[[p,k]],"sparseMatrix")){
x[[p,1]][,k] <- mexsvec(blk[p,,drop=FALSE],as.matrix(M[[p,k]]),isspx[p])
}else{
x[[p,1]][,k] <- mexsvec(blk[p,,drop=FALSE],as.matrix(M[[p,k]]),isspx[p])
}
}
}
}else{
x[[p,1]] <- matrix(0,n,m)
for(k in 1:m){
x[[p,1]][,k] <- M[[p,k]]
}
}
}
}else{
if(blk[[1]] == "s"){
numblk <- length(blk[[2]])
if(numblk > 1 & !is(M, "sparseMatrix")){
x <- mexsvec(blk,as.matrix(M),1)
}else{
x <- mexsvec(blk,as.matrix(M))
}
}else{
x = M
}
}
return(x)
}
At <- svec(blk,A,matrix(1,nrow(blk),1))
View(svec)
rm(svec)
At <- svec(blk,A,matrix(1,nrow(blk),1))
library(sdpt3r)
At <- svec(blk,A,matrix(1,nrow(blk),1))
At
A
A[[1,10]]
library(sdpt3r)
At <- svec(blk,A,matrix(1,nrow(blk),1))
At
is.list(A)
A
as.matrix(A)
library(sdpt3r)
At <- svec(blk,A,matrix(1,nrow(blk),1))
library(sdpt3r)
library(sdpt3r)
library(sdpt3r)
library(sdpt3r)
install.packages("roxygen2")
install.packages("roxygen2")
library(roxygen2)
blk = c("l" = 2)
C = matrix(c(1,1),nrow=1)
A = matrix(c(1,3,4,-1), nrow=2)
At = t(A)
b = c(12,10)
out = sqlp(blk,list(At),list(C),b)
out
B <- rbind(c(0, 0, 0, 1, 0, 0, 1, 1, 0, 0),
c(0, 0, 0, 1, 0, 0, 1, 0, 1, 1),
c(0, 0, 0, 0, 0, 0, 0, 1, 0, 0),
c(1, 1, 0, 0, 0, 0, 0, 1, 0, 1),
c(0, 0, 0, 0, 0, 0, 1, 1, 1, 1),
c(0, 0, 0, 0, 0, 0, 0, 0, 1, 0),
c(1, 1, 0, 0, 1, 0, 0, 1, 1, 1),
c(1, 0, 1, 1, 1, 0, 1, 0, 0, 0),
c(0, 1, 0, 0, 1, 1, 1, 0, 0, 1),
c(0, 1, 0, 1, 1, 0, 1, 0, 1, 0))
n <- max(dim(B))
blk <- c("s" = n)
A <- list()
for(k in 1:n){
A[[k]] <- Matrix(0,n,n)
A[[k]][k,k] <- 1
}
At <- svec(blk[1],A,1)
one <- matrix(1, nrow = n, ncol = 1)
C <- -(diag(c(B %*% one)) - B) / 4
b <- matrix(1, nrow = n, ncol = 1)
sqlp(blk, At, list(C), b)
library(sdpt3r)
B <- rbind(c(0, 0, 0, 1, 0, 0, 1, 1, 0, 0),
c(0, 0, 0, 1, 0, 0, 1, 0, 1, 1),
c(0, 0, 0, 0, 0, 0, 0, 1, 0, 0),
c(1, 1, 0, 0, 0, 0, 0, 1, 0, 1),
c(0, 0, 0, 0, 0, 0, 1, 1, 1, 1),
c(0, 0, 0, 0, 0, 0, 0, 0, 1, 0),
c(1, 1, 0, 0, 1, 0, 0, 1, 1, 1),
c(1, 0, 1, 1, 1, 0, 1, 0, 0, 0),
c(0, 1, 0, 0, 1, 1, 1, 0, 0, 1),
c(0, 1, 0, 1, 1, 0, 1, 0, 1, 0))
n <- max(dim(B))
blk <- c("s" = n)
one <- matrix(1, nrow = n, ncol = 1)
C <- -(diag(c(B %*% one)) - B) / 4
A <- list()
for(k in 1:n){
A[[k]] <- Matrix(0,n,n)
A[[k]][k,k] <- 1
}
At <- svec(blk[1],A,1)
b <- matrix(1, nrow = n, ncol = 1)
sqlp(blk, At, list(C), b)
At
At[[1]]
A
as.matrix(A)
library(sdpt3r)
B <- rbind(c(0, 0, 0, 1, 0, 0, 1, 1, 0, 0),
c(0, 0, 0, 1, 0, 0, 1, 0, 1, 1),
c(0, 0, 0, 0, 0, 0, 0, 1, 0, 0),
c(1, 1, 0, 0, 0, 0, 0, 1, 0, 1),
c(0, 0, 0, 0, 0, 0, 1, 1, 1, 1),
c(0, 0, 0, 0, 0, 0, 0, 0, 1, 0),
c(1, 1, 0, 0, 1, 0, 0, 1, 1, 1),
c(1, 0, 1, 1, 1, 0, 1, 0, 0, 0),
c(0, 1, 0, 0, 1, 1, 1, 0, 0, 1),
c(0, 1, 0, 1, 1, 0, 1, 0, 1, 0))
n <- max(dim(B))
blk <- c("s" = n)
one <- matrix(1, nrow = n, ncol = 1)
C <- -(diag(c(B %*% one)) - B) / 4
A <- list()
for(k in 1:n){
A[[k]] <- Matrix(0,n,n)
A[[k]][k,k] <- 1
}
At <- svec(blk[1],A,1)
b <- matrix(1, nrow = n, ncol = 1)
sqlp(blk, At, list(C), b)
?etp
data(Betp)
out <- etp(Betp)
library(sdpt3r)
library(sdpt3r)
?etp
data(Betp)
out <- etp(Betp)
?nloptr
install.packages("roxygen2")
